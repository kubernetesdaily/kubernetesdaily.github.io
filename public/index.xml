<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>KubeDaily</title>
    <link>//localhost:1313/</link>
    <description>Recent content on KubeDaily</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Mon, 29 Apr 2024 11:44:50 +0530</lastBuildDate>
    <atom:link href="//localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CloudNativeFolks Meetup 001 : ContainerD</title>
      <link>//localhost:1313/meetups/1/cloudnativefolks001/</link>
      <pubDate>Sat, 06 Apr 2024 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/meetups/1/cloudnativefolks001/</guid>
      <description>Event Details When: April 6, 2024 Where: GeekyAnts India Pvt Ltd Bannerghatta Main Road, BTM Layout, 2nd Stage, 2nd Main Road, , No 18 First floor · Bengaluru Schedule Learn about ContainerD in Depth 10:00 am to 10:30 am - Welcome and Registration&#xA;10:30 am to 1:30 pm - Working with ContainerD: Practical Demonstration By Sangam Biradar , CloudNativeFolks&#xA;1:30 pm to 2:00 pm - Networking and Tea Snacks Break</description>
    </item>
    <item>
      <title>Basics of Helm</title>
      <link>//localhost:1313/docs/helm/install-helm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/helm/install-helm/</guid>
      <description>git clone&#xA;Install Helm 3 link ~ curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 11679 100 11679 0 0 32332 0 --:--:-- --:--:-- --:--:-- 32262 Downloading https://get.helm.sh/helm-v3.14.3-darwin-arm64.tar.gz Verifying checksum... Done. Preparing to install helm into /usr/local/bin Password: helm installed into /usr/local/bin/helm Creating the chart link (base) ➜ helm-workshop git:(main) helm create application-1 Creating application-1 Structure of the chart link (base) ➜ application-1 git:(main) ✗ tree .</description>
    </item>
    <item>
      <title>Docker Prerequisites</title>
      <link>//localhost:1313/docs/docker/docker-prerequisites/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/docker/docker-prerequisites/</guid>
      <description>Here are the steps to create a Docker Hub account:&#xA;Go to https://hub.docker.com/signup and click on the &amp;ldquo;Sign Up&amp;rdquo; button. Fill out the registration form with your name, email address, and password. Agree to the terms of service and privacy policy by checking the box. Click on the &amp;ldquo;Sign Up&amp;rdquo; button to complete the registration process. You will receive a verification email from Docker Hub. Follow the link in the email to verify your email address.</description>
    </item>
    <item>
      <title>History of ContainerD</title>
      <link>//localhost:1313/docs/containerd/history-of-containerd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/containerd/history-of-containerd/</guid>
      <description>History of ContainerD linkOrigin from Docker: The origins of containerd can be traced back to Docker, the popular container platform. Docker initially included all components required to run a container in a single monolithic binary, which included the container runtime. As Docker grew, there was a need to break down this monolithic structure into more manageable, modular components.&#xA;Announcement and Spin-Off (2016): Docker announced containerd in December 2016 as a core component split off from the Docker Engine.</description>
    </item>
    <item>
      <title>Interacting with container ecosystem </title>
      <link>//localhost:1313/docs/containersecurity/interacting-with-container-ecosystem/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/containersecurity/interacting-with-container-ecosystem/</guid>
      <description>Interacting with container ecosystem link Docker Images and Image Layers&#xA;In Docker, an image is a lightweight, stand-alone, executable package that includes everything needed to run a piece of software, including the application code, libraries, dependencies, and runtime. It&amp;rsquo;s used to build and run containerized applications.&#xA;A Docker image is made up of a series of layers, where each layer represents an instruction in the image&amp;rsquo;s Dockerfile. When you build an image, each instruction in the Dockerfile creates a new layer in the image.</description>
    </item>
    <item>
      <title>Architecture of containerd</title>
      <link>//localhost:1313/docs/containerd/architecture-of-containerd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/containerd/architecture-of-containerd/</guid>
      <description>This diagram represents the architecture of containerd, an industry-standard core container runtime. It is designed to be less opinionated and can be used as a base for building a more complex container platform. Let&amp;rsquo;s break down the architecture depicted in the image:&#xA;Ecosystem Layer&#xA;The topmost layer is the ecosystem that interacts with containerd. It includes:&#xA;Platforms: Cloud platforms and container orchestration systems that use containerd as their runtime, such as Google Cloud Platform, Docker, IBM Cloud, Microsoft Azure, Alibaba Cloud, AWS, and others.</description>
    </item>
    <item>
      <title>Attack surface of the container ecosystem </title>
      <link>//localhost:1313/docs/containersecurity/attack-surface-of-the-container-ecosystem/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/containersecurity/attack-surface-of-the-container-ecosystem/</guid>
      <description>Container Technology Archiecture link Developer systems (generate images and send them to testing and accreditation) Testing and accreditation systems (validate and verify the contents of images, sign images, and send images to the registry) Registries (store images and distribute images to the orchestrator upon request) Orchestrators (convert images into containers and deploy containers to hosts) Hosts (run and stop containers as directed by the orchestrator) Attack surface of the container ecosystem link One way to start thinking about the threat model is to consider the actors involved.</description>
    </item>
    <item>
      <title>Deep Dive into Charts</title>
      <link>//localhost:1313/docs/helm/deep-dive-chart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/helm/deep-dive-chart/</guid>
      <description>create new chart link (base) ➜ helm-workshop git:(main) ✗ cd new-chart (base) ➜ new-chart git:(main) ✗ ls Chart.yaml charts templates values.yaml (base) ➜ new-chart git:(main) ✗ charts linkif you see your file structure you don&amp;rsquo;t see charts folder&#xA;. ├── Chart.yaml ├── charts ├── templates │ ├── NOTES.txt │ ├── _helpers.tpl │ ├── deployment.yaml │ ├── hpa.yaml │ ├── ingress.yaml │ ├── service.yaml │ ├── serviceaccount.yaml │ └── tests │ └── test-connection.</description>
    </item>
    <item>
      <title>Hello World in Docker</title>
      <link>//localhost:1313/docs/docker/hello-world-in-docker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/docker/hello-world-in-docker/</guid>
      <description>run your first hello world example link docker run hello-world is a command that runs a simple Docker container to verify that Docker is correctly installed on your system and working as expected.&#xA;When you run this command, Docker will first check if the &amp;ldquo;hello-world&amp;rdquo; image is available locally. If the image is not found, Docker will download it from the Docker Hub registry.&#xA;Once the &amp;ldquo;hello-world&amp;rdquo; image is available, Docker will create a container from the image and run it.</description>
    </item>
    <item>
      <title>pre-requisites</title>
      <link>//localhost:1313/docs/kubernetes/pre-requisites-kubeadm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/kubernetes/pre-requisites-kubeadm/</guid>
      <description>Includes configuring pre-requisites to install kubeadm linkstep 01) Enable following ports and protcols link on kubemaster : Open following ports : https://kubernetes.io/docs/reference/networking/ports-and-protocols/ sudo ufw status sudo ufw enable sudo ufw allow 80/tcp sudo ufw allow 443/tcp sudo ufw allow 22/tcp sudo ufw allow 6443/tcp sudo ufw allow 2379/tcp sudo ufw allow 2380/tcp sudo ufw allow 10250/tcp sudo ufw allow 10259/tcp sudo ufw allow 10257/tcp sudo ufw allow 30000:32767/tcp sudo ufw reload sudo ufw status ###### ----- kubenode01, kubenode02 ---# sudo ufw status sudo ufw enable sudo ufw allow 80/tcp sudo ufw allow 443/tcp sudo ufw allow 22/tcp sudo ufw allow 10250/tcp sudo ufw allow 30000:32767/tcp sudo ufw reload sudo ufw status sudo iptables -L #--- on all nodes step 02) link ------ Install Container Runtime ----------# #---- on all nodes : Forwarding IPv4 and letting iptables see bridged traffic : https://kubernetes.</description>
    </item>
    <item>
      <title>Docker Image Filtering</title>
      <link>//localhost:1313/docs/docker/docker-images-filter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/docker/docker-images-filter/</guid>
      <description>running docker run alpine command would download the Alpine Linux image from Docker Hub and start a new container based on that image. You can then use the container to run commands or applications. When you exit the container, it will stop running.&#xA;Alpine Linux is a lightweight Linux distribution that is commonly used in Docker containers due to its small size and security features.&#xA;dockerworkshop git:(main) ✗ docker pull alpine:3.</description>
    </item>
    <item>
      <title>Environment variables </title>
      <link>//localhost:1313/docs/containersecurity/environment-variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/containersecurity/environment-variables/</guid>
      <description>Environment variables example of using an environment variable in a Dockerfile:&#xA;FROM alpine:latest # Set an environment variable ENV MY_VAR &amp;#34;Hello World&amp;#34; # Use the environment variable in a command RUN echo $MY_VAR &amp;gt; /app/output.txt CMD [&amp;#34;cat&amp;#34;, &amp;#34;/app/output.txt&amp;#34;] In this example, the environment variable MY_VAR is set to the value &amp;ldquo;Hello World&amp;rdquo;. This variable is then used in the RUN command to create an output.txt file with the contents &amp;ldquo;Hello World&amp;rdquo;.</description>
    </item>
    <item>
      <title>Introduction to Runc</title>
      <link>//localhost:1313/docs/containerd/introduction-to-runc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/containerd/introduction-to-runc/</guid>
      <description>install ruc link sangam@sangam:~$ sudo apt-get -y install runc Reading package lists... Done Building dependency tree... Done Reading state information... Done runc is already the newest version (1.1.7-0ubuntu1~22.04.2). 0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded. sangam@sangam:~$ runc NAME: runc - Open Container Initiative runtime runc is a command line client for running applications packaged according to the Open Container Initiative (OCI) format and is a compliant implementation of the Open Container Initiative specification.</description>
    </item>
    <item>
      <title>kubeadm</title>
      <link>//localhost:1313/docs/kubernetes/kubeadm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/kubernetes/kubeadm/</guid>
      <description>#!/bin/bash # Step 04 ) Cluster Creation : https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/ # Initialize control-plane node : https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#initializing-your-control-plane-node # we dont have multiple control plane nodes # Choose POD Network Addon # --pod-network-cidr , --apiserver-advertise-address sudo kubeadm init --pod-network-cidr=10.244.0.0/16 --apiserver-advertise-address=192.168.56.11 #--------- Cluster Configuration Completed------------------# mkdir -p $HOME/.kube sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config sudo chown $(id -u):$(id -g) $HOME/.kube/config # Message from Kubernetes Configuration: Your Kubernetes control-plane has initialized successfully! To start using your cluster, you need to run the following as a regular user: mkdir -p $HOME/.</description>
    </item>
    <item>
      <title>Working with Multiple Values</title>
      <link>//localhost:1313/docs/helm/-multiple-values/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/helm/-multiple-values/</guid>
      <description>create another values file link # Default values for application-1. # This is a YAML-formatted file. # Declare variables to be passed into your templates. deployment: replicaCount: 1 name: new-deployememt image: app: ngnix version: latest service: name: my-service type: NodePort port: 80 targetPort: 80 nodePort: 32046 selector: app: ngnix just chamged nortport value here&#xA;install chart again link base) ➜ application-1 git:(main) ✗ helm install chart-1 . W0325 04:26:44.306101 7525 warnings.</description>
    </item>
    <item>
      <title> ContainerD CLI ctr </title>
      <link>//localhost:1313/docs/containerd/containerd-ctr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/containerd/containerd-ctr/</guid>
      <description>update ubuntu server link sudo apt-get update Install the necessary packages link sudo apt-get install apt-transport-https ca-certificates curl software-properties-common install docker link curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - Install Containerd link sudo apt-get install containerd -y Reading package lists... Done Building dependency tree... Done Reading state information... Done containerd is already the newest version (1.7.2-0ubuntu1~22.04.1). containerd set to manually installed. 0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.</description>
    </item>
    <item>
      <title>creating template file and access through it </title>
      <link>//localhost:1313/docs/helm/template-file/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/helm/template-file/</guid>
      <description>create helper template file linkcreate file with name _my-template.tpl&#xA;{{- define &amp;#34;labels&amp;#34; }} app: ngnix version: &amp;#34;1.0&amp;#34; team: myteam {{- end }} (base) ➜ application-1 git:(main) ✗ helm template . --- # Source: application-1/templates/service.yaml apiVersion: v1 kind: Service metadata: name: my-service labels: app: ngnix spec: type: NodePort ports: - port: 80 targetPort: 80 nodeport: 32036 protocol: TCP name: http selector: app: ngnix --- # Source: application-1/templates/deployment.yaml apiVersion: apps/v1 kind: Deployment metadata: name: my-deployememt labels: app: ngnix version: &amp;#34;1.</description>
    </item>
    <item>
      <title>Docker volumes </title>
      <link>//localhost:1313/docs/containersecurity/docker-volumes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/containersecurity/docker-volumes/</guid>
      <description>Docker volumes&#xA;How to create encrypted data volume linkCreate a Docker volume using the docker volume create command, for example:&#xA;$ docker volume create encrypted_volume Create a Docker container that will be used to create the encrypted volume. For this, you can use a tool like luksipc, which allows you to create a LUKS-encrypted file within a container.&#xA;Run the luksipccontainer with the --volume flag to specify the Docker volume you want to encrypt.</description>
    </item>
    <item>
      <title>HA Cluster</title>
      <link>//localhost:1313/docs/kubernetes/ha-cluster/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/kubernetes/ha-cluster/</guid>
      <description>Kubernetes utilizes a microservices architecture, with all requests initially directed to a central API server microservice, supported by various other components. For high availability in a Kubernetes cluster, it&amp;rsquo;s common to add more control plane nodes, each hosting additional instances of the API Server, Scheduler, and Controller Manager. If etcd is part of the control plane nodes, additional members will also be added to the etcd cluster.&#xA;In a setup with multiple control plane nodes, several API Servers operate concurrently in a highly available configuration, all interfacing with the same etcd cluster.</description>
    </item>
    <item>
      <title>Images as Tar Files</title>
      <link>//localhost:1313/docs/docker/images-as-tar-files/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/docker/images-as-tar-files/</guid>
      <description>Images and Container as Tarfile linkDocker provides the ability to save images and containers as tar files, which can be useful for sharing with others or transferring between systems. Here&amp;rsquo;s how to do it:&#xA;docker pull nginx:latest latest: Pulling from library/nginx 5731adb3a4ab: Pull complete 8785c8f663d3: Pull complete 023b6bd393e4: Pull complete fd8f86b165b0: Pull complete 8f41e7c12976: Pull complete 3b5338ea7d08: Pull complete Digest: sha256:6650513efd1d27c1f8a5351cbd33edf85cc7e0d9d0fcb4ffb23d8fa89b601ba8 Status: Downloaded newer image for nginx:latest docker.io/library/nginx:latest Saving an Image as a Tar File linkTo save a Docker image as a tar file, use the docker save command with the image name and output file name:</description>
    </item>
    <item>
      <title> Kata Containers </title>
      <link>//localhost:1313/docs/containerd/kata-container/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/containerd/kata-container/</guid>
      <description>Kata Containers link $ bash -c &amp;#34;$(curl -fsSL https://raw.githubusercontent.com/kata-containers/kata-containers/main/utils/kata-manager.sh)&amp;#34; If your system already has containerd installed, to install Kata Containers and only configure containerd, run:&#xA;$ bash -c &amp;#34;$(curl -fsSL https://raw.githubusercontent.com/kata-containers/kata-containers/main/utils/kata-manager.sh) -o&amp;#34; if you have not installed anything use this to get setup everything&#xA;$ bash -c &amp;#34;$(curl -fsSL https://raw.githubusercontent.com/kata-containers/kata-containers/main/utils/kata-manager.sh) -h&amp;#34; verify installation link bash -c &amp;#34;$(curl -fsSL https://raw.githubusercontent.com/kata-containers/kata-containers/main/utils/kata-manager.sh) -o &amp;gt; &amp;#34; INFO: Checking dependencies INFO: Running pre-checks INFO: Downloading Kata Containers release (latest version) % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 100 132M 100 132M 0 0 5000k 0 0:00:27 0:00:27 --:--:-- 4777k INFO: Installing Kata Containers release 3.</description>
    </item>
    <item>
      <title>Advance Temaplate with if statement</title>
      <link>//localhost:1313/docs/helm/advance-if-statement/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/helm/advance-if-statement/</guid>
      <description>update your deployment file link apiVersion: apps/v1 kind: Deployment metadata: name: {{ .Values.deployment.name }} labels: {{- include &amp;#34;labels&amp;#34; . | nindent 4 }} spec: replicas: {{ .Values.deployment.replicaCount }} selector: matchLabels: app: nginx template: metadata: labels: app: nginx spec: containers: - name: nginx image: &amp;#34;{{ .Values.deployment.image.app }}:{{ .Values.deployment.image.version }}&amp;#34; ports: - name: http containerPort: 80 protocol: TCP {{- if eq .Values.container1.enabled true }} {{- include &amp;#34;container1&amp;#34; . | nindent 8 }} {{- end }} create new template file link {{- define &amp;#34;container1&amp;#34; }} - name: new-container image: &amp;#34;{{ .</description>
    </item>
    <item>
      <title>Docker Networking </title>
      <link>//localhost:1313/docs/containersecurity/docker-networking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/containersecurity/docker-networking/</guid>
      <description>Docker Networking linkThe Container Netwotk Model (CNM) is the design document for Docker Networking which is implemented via &amp;rsquo;libnetwork&amp;rsquo; in golang&#xA;Sandbox - isolated network stavk Endpount - Virtual Ethernet Interfece Network - Virtual Switch (bridge) Note - Libnetwork -&amp;gt; implemenrs the control and management plane functions&#xA;Network Specific Drivers -&amp;gt; implemenrs the data plane while also handling the connectivity and isolation&#xA;Docker Native Network Drivers link Bridge - uses a software bridge whicha allows containers connected to the same bridge network to communicate</description>
    </item>
    <item>
      <title>kubeadm upgrade &amp; downgrade </title>
      <link>//localhost:1313/docs/kubernetes/kubeadm-upgrade/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/kubernetes/kubeadm-upgrade/</guid>
      <description>Perform Version Upgrades on a Kubernetes Cluster using kubeadm&#xA;Upgrading a Kubernetes cluster involves updating its core components, which include the Kubernetes API Server, Scheduler, Controller Manager, etcd, and Kubelets. Kubeadm simplifies this process by managing the container versions of these control plane components. Additional tasks such as renewing certificates and updating kubelet configurations are also handled by Kubeadm, utilizing the kubeadm upgrade commands.&#xA;When planning an upgrade, you must first decide on the target version.</description>
    </item>
    <item>
      <title>Pushing to DockerHub</title>
      <link>//localhost:1313/docs/docker/pushing-to-dockerhub/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/docker/pushing-to-dockerhub/</guid>
      <description>Pull nginx image from dockerhub using link dockerworkshop git:(main) ✗ docker pull nginx Using default tag: latest latest: Pulling from library/nginx Digest: sha256:6650513efd1d27c1f8a5351cbd33edf85cc7e0d9d0fcb4ffb23d8fa89b601ba8 Status: Image is up to date for nginx:latest docker.io/library/nginx:latest Run Docker with ngnix link dockerworkshop git:(main) ✗ docker run --name docker-nginx -p 80:80 -d nginx 63258aebdc2d8ea40a0099efb3e51f8b15db2fe2dc048da3901843b4782d19fb –name docker-nginx : Name given to the container that is run is docker-nginx-p 80:80 : the port we are exposing and mapping from local machine port number to that of container, in the format local_machine_port:container_port-d : Detached mode – Runs the container in background</description>
    </item>
    <item>
      <title> firecracker </title>
      <link>//localhost:1313/docs/containerd/firecracker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/containerd/firecracker/</guid>
      <description>get docker installed https://get.docker.com&#xA;build firecracker linkgit clone https://github.com/firecracker-microvm/firecracker cd firecracker tools/devtool build toolchain=&amp;quot;$(uname -m)-unknown-linux-musl&amp;quot;&#xA;you get output like thjis thats binary&#xA;[Firecracker release.sh 2024-02-11T13:42:36+00:00] Binaries placed under build/cargo_target/aarch64-unknown-linux-musl/debug sangam@sangam:~/firecracker$ toolchain=&amp;quot;$(uname -m)-unknown-linux-musl&amp;quot;&#xA;TODO</description>
    </item>
    <item>
      <title>Auditing Docker Security </title>
      <link>//localhost:1313/docs/containersecurity/auditing-docker-security/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/containersecurity/auditing-docker-security/</guid>
      <description>Auditing Docker Security linkDOCKER BENCH FOR SECURITY&#xA;Docker Bench for Security is an open source Bash script that checks for various common security best practices of deploying Docker in production environments. The tests are all automated and are based on the CIS Docker Benchmark. More information about Docker Bench for Security can be found on GitHub: https://github.com/docker/docker-bench-security&#xA;auditing docker security with docker bench for security linkThe auditing process can be performed by following the procedures outlined below:</description>
    </item>
    <item>
      <title>Building a Base Image</title>
      <link>//localhost:1313/docs/docker/building-a-base-image/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/docker/building-a-base-image/</guid>
      <description>write simple c program link #include&amp;lt;stdio.h&amp;gt; int main() { printf(&amp;#34;dockerworkshop&amp;#34;); } Compile C program link gcc -o hello hello.c ✗ ./hello dockerworkshop% create dockerfile with following content : link FROM scratch ADD hello / CMD [&amp;#34;/hello&amp;#34;] Build Dockerfile without any base image link Dockerfile git:(main) ✗ docker build -t sangam14/hello-scratch -f dockerfile.hello . [&amp;#43;] Building 0.1s (5/5) FINISHED =&amp;gt; [internal] load build definition from dockerfile.hello 0.0s =&amp;gt; =&amp;gt; transferring dockerfile: 87B 0.</description>
    </item>
    <item>
      <title>else and else if statement</title>
      <link>//localhost:1313/docs/helm/else-else-if-statement/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/helm/else-else-if-statement/</guid>
      <description>update your templ link {{- define &amp;#34;container1&amp;#34; }} - name: new-container image: &amp;#34;{{ .Values.deployment.image.app }}:{{ .Values.deployment.image.version }}&amp;#34; ports: - name: http containerPort: 80 protocol: TCP {{- end }} {{- define &amp;#34;container2&amp;#34; }} - name: new-container2 image: &amp;#34;{{ .Values.deployment.image.app }}:{{ .Values.deployment.image.version }}&amp;#34; ports: - name: http containerPort: 80 protocol: TCP {{- end }} make your container value as false link # Default values for application-1. # This is a YAML-formatted file. # Declare variables to be passed into your templates.</description>
    </item>
    <item>
      <title>etcd Backup and Restore</title>
      <link>//localhost:1313/docs/kubernetes/etcd-backup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/kubernetes/etcd-backup/</guid>
      <description>etcd Backup and Restore&#xA;Etcd maintains the active state of the cluster, with the API Servers interacting by writing to and retrieving data from it. Each transaction executed in etcd is logged in a Write-Ahead Log (WAL) file specific to each cluster member. These files, which are updated by transactions initiated by the cluster&amp;rsquo;s &amp;ldquo;leader,&amp;rdquo; are periodically condensed into snapshots to conserve space. This snapshotting process is an integral part of etcd&amp;rsquo;s routine operations, and snapshots can also be manually triggered using the etcdctl tool with the snapshot save command.</description>
    </item>
    <item>
      <title> ContainerD &#43; Crun </title>
      <link>//localhost:1313/docs/containerd/crun/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/containerd/crun/</guid>
      <description>Install on ubuntu link $ sudo apt-get install -y make git gcc build-essential pkgconf libtool \ libsystemd-dev libprotobuf-c-dev libcap-dev libseccomp-dev libyajl-dev \ go-md2man autoconf python3 automake ContainerD Configuration link demo@sangam:~$ sudo mkdir -p /etc/containerd/ demo@sangam:~$ sudo tee /etc/containerd/config.toml &amp;gt; /dev/null &amp;lt;&amp;lt;EOT version = 2 [plugins.&amp;#34;io.containerd.runtime.v1.linux&amp;#34;] shim_debug = false [plugins.&amp;#34;io.containerd.grpc.v1.cri&amp;#34;.containerd] default_runtime_name = &amp;#34;crun&amp;#34; [plugins.&amp;#34;io.containerd.grpc.v1.cri&amp;#34;.containerd.runtimes] [plugins.&amp;#34;io.containerd.grpc.v1.cri&amp;#34;.containerd.runtimes.crun] runtime_type = &amp;#34;io.containerd.runc.v2&amp;#34; [plugins.&amp;#34;io.containerd.grpc.v1.cri&amp;#34;.containerd.runtimes.crun.options] BinaryName = &amp;#34;/usr/local/bin/crun&amp;#34; SystemdCgroup = true [plugins.&amp;#34;io.containerd.grpc.v1.cri&amp;#34;.containerd.runtimes.runsc] runtime_type = &amp;#34;io.containerd.runsc.v1&amp;#34; [plugins.&amp;#34;io.containerd.grpc.v1.cri&amp;#34;.containerd.runtimes.runsc.options] SystemdCgroup = true [plugins.</description>
    </item>
    <item>
      <title>50 Helm Template Cheatsheets</title>
      <link>//localhost:1313/docs/helm/helm-templates-cheatsheet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/helm/helm-templates-cheatsheet/</guid>
      <description>Basic Template Functions: link Access a Value from values.yaml:&#xA;replicas: {{ .Values.replicaCount }} Access Release Information:&#xA;releaseName: {{ .Release.Name }} releaseNamespace: {{ .Release.Namespace }} Access Chart Information:&#xA;chartName: {{ .Chart.Name }} chartVersion: {{ .Chart.Version }} Port Configuration:&#xA;containerPort: {{ .Values.containerPort }} Conditional Blocks: link Conditional Rendering:&#xA;{{- if .Values.enableFeature }} featureEnabled: true {{- end }} Conditional Rendering with Else Block:&#xA;{{- if .Values.enableFeature }} featureEnabled: true {{- else }} featureEnabled: false {{- end }} Loops: link Loop Over a List:</description>
    </item>
    <item>
      <title>Basics of Pod</title>
      <link>//localhost:1313/docs/kubernetes/basics-of-pods/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/kubernetes/basics-of-pods/</guid>
      <description>0. What is POD learn via Kubectl Explain link kubectl explain pod KIND: Pod VERSION: v1 DESCRIPTION: Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts. FIELDS: apiVersion &amp;lt;string&amp;gt; APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.</description>
    </item>
    <item>
      <title>Container Image Security </title>
      <link>//localhost:1313/docs/containersecurity/container-image-security/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/containersecurity/container-image-security/</guid>
      <description>Container Image Security link Building secure container images Choosing base images linkAlpine link Pros very small images: the community pays a lot attention on minimizing image sizes minimum functionality: only absolutely necessary packages contained lightweight init system: like Gentoo, Alpine uses OpenRC, a lightweight alternative to systemd musl performance: for some cases, musl libc can be more performant than glibc Cons rather Poor Documentation Small team : Currently there are 3 developer listed as the alpine linux team possible incompatibilities: musl libc may cause problems with some C-based plugins and adjustments may be necessary if you compile software yourself Debian link Pro:</description>
    </item>
    <item>
      <title>Dockerfile ADD</title>
      <link>//localhost:1313/docs/docker/dockerfile-add/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/docker/dockerfile-add/</guid>
      <description>Here&amp;rsquo;s an example of a Dockerfile that uses the ADD instruction to copy a local file into a Docker image:&#xA;FROM ubuntu:latest WORKDIR /app ADD example.txt /app/ CMD [&amp;#34;cat&amp;#34;, &amp;#34;/app/example.txt&amp;#34;] Build Dockerfile link Dockerfile git:(main) ✗ docker build -t sangam14/add-dockerfile -f dockerfile.add . [&amp;#43;] Building 5.2s (9/9) FINISHED =&amp;gt; [internal] load build definition from dockerfile.add 0.0s =&amp;gt; =&amp;gt; transferring dockerfile: 131B 0.0s =&amp;gt; [internal] load .dockerignore 0.0s =&amp;gt; =&amp;gt; transferring context: 2B 0.</description>
    </item>
    <item>
      <title> contaiNERD &#43; nerdctl </title>
      <link>//localhost:1313/docs/containerd/nerdctl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/containerd/nerdctl/</guid>
      <description>install ContainerD + nerctl link wget https://github.com/containerd/nerdctl/releases/download/v1.7.3/nerdctl-1.7.3-linux-arm64.tar.gz tar -xzf nerdctl-1.7.3-linux-arm64.tar.gz sudo mv ./nerdctl /usr/local/bin verify nerctl link sangam@demo:~$ sudo nerdctl nerdctl is a command line interface for containerd Config file ($NERDCTL_TOML): /etc/nerdctl/nerdctl.toml Usage: nerdctl [flags] Management commands: apparmor Manage AppArmor profiles builder Manage builds container Manage containers image Manage images ipfs Distributing images on IPFS namespace Manage containerd namespaces network Manage networks system Manage containerd volume Manage volumes Commands: attach Attach stdin, stdout, and stderr to a running container.</description>
    </item>
    <item>
      <title>Dockerfile COPY</title>
      <link>//localhost:1313/docs/docker/dockerfile-copy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/docker/dockerfile-copy/</guid>
      <description>COPY is a dockerfile command that copies files from a local source location to a destination in the Docker container. A Dockerfile is a text file with instructions to set up a Docker container.&#xA;create myfile1.txt and myfile2.txt with following content :&#xA;# myfile1.txt Hello This is my first file ! This is file will be copied in /usr/share directory from Docker host to Docker Container. # myfile2.txt Hello This is my second file !</description>
    </item>
    <item>
      <title>DockerFile Security Best Practices </title>
      <link>//localhost:1313/docs/containersecurity/dockerfile-security-best-practices/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/containersecurity/dockerfile-security-best-practices/</guid>
      <description>DockerFile Security Best Practices link Choose Minimal Base Images FROM alpine WORKDIR /app COPY package.json /app RUN npm install CMD [“node”,“index.js”] Remove Cache Packages FROM alpine RUN apk add nginx &amp;amp;&amp;amp; rm -rf /var/cache/apt/* COPY index.html /var/www/html/ EXPOSE 80 CMD [“nginx”,“-g”,“daemon off;”] FROM alpine RUN apk add –no-cache nginx COPY index.html /var/www/html/ EXPOSE 80 CMD [“nginx”,“-g”,“daemon off;”] avoid multilayers FROM alpine RUN apk update RUN apk add curl RUN apk add nodejs RUN apk add nginx-1.</description>
    </item>
    <item>
      <title>Labels and Selectors </title>
      <link>//localhost:1313/docs/kubernetes/labels-and-selectors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/kubernetes/labels-and-selectors/</guid>
      <description>Labels - Maps (aka Dictionaries) link ➜ k8s101 git:(main) ✗ kubectl explain deployment.metadata.labels KIND: Deployment VERSION: apps/v1 FIELD: labels &amp;lt;map[string]string&amp;gt; DESCRIPTION: Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels Labels are attached to Kubernetes objects and are simple key: value pairs or maps(dictionary). Labels are used to store identifying information about a thing that you might need to query against.</description>
    </item>
    <item>
      <title> contaiNERD &#43; runwasi </title>
      <link>//localhost:1313/docs/containerd/runwasi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/containerd/runwasi/</guid>
      <description>install rust link curl --proto &amp;#39;=https&amp;#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh clone runwasi link $ git clone https://github.com/containerd/runwasi.git install wasmedge-containerd-shim link cd runwasi make build-wasmedge INSTALL=&amp;#34;sudo install&amp;#34; LN=&amp;#34;sudo ln -sf&amp;#34; make install-wasmedge run wasm using ctr cli link make load sudo ctr run --rm --runtime=io.containerd.wasmedge.v1 ghcr.io/containerd/runwasi/wasi-demo-app:latest testwasm /wasi-demo-app.wasm echo &amp;#39;hello&amp;#39; </description>
    </item>
    <item>
      <title>Create POD with Command and Arguments </title>
      <link>//localhost:1313/docs/kubernetes/create-pod-with-command-and-arguments/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/kubernetes/create-pod-with-command-and-arguments/</guid>
      <description>kubectl explain pods.spec.containers.command link k8s101 git:(main) ✗ kubectl explain pods.spec.containers.command KIND: Pod VERSION: v1 FIELD: command &amp;lt;[]string&amp;gt; DESCRIPTION: Entrypoint array. Not executed within a shell. The container image&amp;#39;s ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container&amp;#39;s environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.</description>
    </item>
    <item>
      <title>Dockerfile CMD</title>
      <link>//localhost:1313/docs/docker/dockerfile-cmd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/docker/dockerfile-cmd/</guid>
      <description>The CMD command we saw earlier followed the Shell syntax:&#xA;CMD executable parameter1 parameter2 However, it is better practice to use the JSON array format:&#xA;CMD [&amp;#34;executable&amp;#34;, &amp;#34;parameter1&amp;#34;, &amp;#34;parameter2&amp;#34;] A CMD command can be overridden by providing the executable and its parameters in the docker ​run command. For example:&#xA;FROM ubuntu RUN apt-get update CMD [&amp;#34;echo&amp;#34; , &amp;#34;Join CloudNativeFolks Community&amp;#34;] build dockerfile link docker build -t sangam14/cmd-dockerfile -f dockerfile.cmd . [&amp;#43;] Building 8.</description>
    </item>
    <item>
      <title>SecretScanner - Finding secrets and passwords in container images and file systems </title>
      <link>//localhost:1313/docs/containersecurity/secretscanner-finding-secrets-and-passwords-in-container-images-and-file-systems/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/containersecurity/secretscanner-finding-secrets-and-passwords-in-container-images-and-file-systems/</guid>
      <description>Published on CloudNativeFolks&#xA;One of most common mistake is leaking Secrets via docker images or file system in this blogpost we will use Deepfence&amp;rsquo;s Open Source Project SecretScanner&#xA;few days back I found this interesting tweet discussion from cybersecurity community members !&#xA;Find secrets and passwords in container images and file systems https://t.co/ccejD09KR6&#xA;&amp;mdash; Nicolas Krassas (@Dinosn) September 19, 2022 here you see article around Uber security incidence&#xA;%[https://www.uber.com/newsroom/security-update/]&#xA;lets understand why secret scanner help you securing your container images and file system</description>
    </item>
    <item>
      <title>Wasm &#43; ContainerD &#43; CRUN </title>
      <link>//localhost:1313/docs/containerd/wasm-containerd-crun/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/containerd/wasm-containerd-crun/</guid>
      <description>Installing WasmEdge link curl -sSf https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/utils/install.sh | bash source $HOME/.wasmedge/env &amp;gt; Using Python: /usr/bin/python3 INFO - CUDA cannot be detected via nvcc INFO - CUDA 12.x cannot be detected via nvidia-smi INFO - Compatible with current configuration INFO - Running Uninstaller WARNING - Uninstaller did not find previous installation WARNING - SHELL variable not found. Using bash as SHELL INFO - shell configuration updated INFO - Downloading WasmEdge |============================================================|100.00 %INFO - Downloaded INFO - Installing WasmEdge INFO - WasmEdge Successfully installed INFO - Run: Verify installation link wasmedge --version the response would be something:-</description>
    </item>
    <item>
      <title>Arkade Open Source Marketplace for Kubernetes</title>
      <link>//localhost:1313/blog/arkade-open-source-marketplace-for-kubernetes/</link>
      <pubDate>Mon, 13 Feb 2023 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/blog/arkade-open-source-marketplace-for-kubernetes/</guid>
      <description>Getting started with Arkade CLI Macos/Linux ~ curl -sLS https://get.arkade.dev | sudo sh Password: Downloading package https://github.com/alexellis/arkade/releases/download/0.9.7/arkade-darwin-arm64 as /tmp/arkade-darwin-arm64 Download complete. Running with sufficient permissions to attempt to move arkade to /usr/local/bin New version of arkade installed to /usr/local/bin Creating alias &amp;#39;ark&amp;#39; for &amp;#39;arkade&amp;#39;. _ _ __ _ _ __| | ____ _ __| | ___ / _` | &amp;#39;__| |/ / _` |/ _` |/ _ \ | (_| | | | &amp;lt; (_| | (_| | __/ \__,_|_| |_|\_\__,_|\__,_|\___| Open Source Marketplace For Developer Tools Version: 0.</description>
    </item>
    <item>
      <title> YaraHunter - Malware Scanner for Container Images </title>
      <link>//localhost:1313/docs/containersecurity/yarahunter-malware-scanner-for-container-images/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/containersecurity/yarahunter-malware-scanner-for-container-images/</guid>
      <description>What is YARA ? linkYARA was originally developed by Victor Alvarez of VirusTotal and released on github in 2013 .&#xA;YARA , the &amp;ldquo;Pattern matching Swiss knife for malware researchers available on github&#xA;Install yara on Mac link brew install yara Yara is extremely popular within because of different use case : link Identify and classify malware&#xA;Find new samples based on family-specific pattern&#xA;Deploy Yara Rules to identify samples and compromised device for incident response</description>
    </item>
    <item>
      <title>Dockerfile Entrypoint</title>
      <link>//localhost:1313/docs/docker/dockerfile-entrypoint/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/docker/dockerfile-entrypoint/</guid>
      <description>Running a Docker Container with ENTRYPOINT linkLet&amp;rsquo;s learn the details in this case by actually executing ENTRYPOINT in exec form. The following is an example of a Dockerfile that uses the exec form of ENTRYPOINT, which outputs a character string on the command line.&#xA;FROM alpine ENTRYPOINT [&amp;#34;echo&amp;#34;, &amp;#34;Hello!&amp;#34;] Build dockerfile link ➜ Dockerfile git:(main) ✗ docker build -t sangam14/entrypoint-dockerfile -f dockerfile.entrypoint . [&amp;#43;] Building 3.2s (6/6) FINISHED =&amp;gt; [internal] load build definition from dockerfile.</description>
    </item>
    <item>
      <title>Multi-Container Pods</title>
      <link>//localhost:1313/docs/kubernetes/multi-container-pods/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/kubernetes/multi-container-pods/</guid>
      <description>Why does Kubernetes allow more than one container in a Pod link Containers in a Pod runs on a &amp;ldquo;logical host&amp;rdquo;: they use the same network namespace (same IP address and port space), they can use shared volumes using several containers for an application is simpler to use, more transparent, and allows decoupling software dependencies Use Cases for Multi-Container Pods linkThe primary purpose of a multi-container Pod is to support co-located, co-managed helper processes for a main program</description>
    </item>
    <item>
      <title>Deployments and replication</title>
      <link>//localhost:1313/docs/kubernetes/deployments-and-replication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/kubernetes/deployments-and-replication/</guid>
      <description>Kubectl explain Deployment link k8sworkshop git:(main) ✗ kubectl explain deployments KIND: Deployment VERSION: apps/v1 DESCRIPTION: Deployment enables declarative updates for Pods and ReplicaSets. FIELDS: apiVersion &amp;lt;string&amp;gt; APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources kind &amp;lt;string&amp;gt; Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to.</description>
    </item>
    <item>
      <title>Dockerfile WORKDIR</title>
      <link>//localhost:1313/docs/docker/dockerfile-workdir/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/docker/dockerfile-workdir/</guid>
      <description>The WORKDIR command is used to define the working directory of a Docker container at any given time. The command is specified in the Dockerfile.&#xA;Any RUN, CMD, ADD, COPY, or ENTRYPOINT command will be executed in the specified working directory.&#xA;WORKDIR instruction Dockerfile for Docker Quick Start link FROM ubuntu WORKDIR /var/www/html RUN apt-get update &amp;amp;&amp;amp; apt-get install -y nginx COPY index.html . ENTRYPOINT [&amp;#34;nginx&amp;#34;, &amp;#34;-g&amp;#34;, &amp;#34;daemon off;&amp;#34;] build dockerfile link docker build -t sangam14/workdir-dockerfile -f dockerfile.</description>
    </item>
    <item>
      <title>RBAC</title>
      <link>//localhost:1313/docs/kubernetes/rbac/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/kubernetes/rbac/</guid>
      <description>Steps to Set Up X509 Certificate Authentication link mkdir newusercrt cd newusercrt openssl genrsa --out sangam.key 2048 openssl req -new -key sangam.key -out sangam.csr -subj &amp;#34;/CN=sangam/O=group1&amp;#34; This creates a private key (sangam.key) and a CSR (sangam.csr). The CN (Common Name) is set to the user&amp;rsquo;s name, and O (Organization) is an optional field to specify a group.&#xA;Create a CertificateSigningRequest in Kubernetes linkEncode the CSR in base64 and create a YAML file for the Kubernetes CSR object:</description>
    </item>
    <item>
      <title>Security Linting of Dockerfiles</title>
      <link>//localhost:1313/docs/containersecurity/security-linting-of-dockerfiles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/containersecurity/security-linting-of-dockerfiles/</guid>
      <description>hadolint linkHadolint comes with a robust and easy to use CLI. You can install it on a variety of platforms, including macOS using brew install hadolint.&#xA;Confirm the installation was successful with the following command:&#xA;$ hadolint --help hadolint - Dockerfile Linter written in Haskell We’ll use the following Dockerfile as an example, which can be used to run a Python Django web server. On the surface, it looks fine but we’ll see it has a lot of problems.</description>
    </item>
    <item>
      <title>ConfigMap </title>
      <link>//localhost:1313/docs/kubernetes/configmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/kubernetes/configmap/</guid>
      <description>craete index-html-configmap.yaml with following content link apiVersion: v1 kind: ConfigMap metadata: name: index-html-configmap namespace: default data: index.html: | &amp;lt;html&amp;gt; &amp;lt;h1&amp;gt;Welcome&amp;lt;/h1&amp;gt; &amp;lt;/br&amp;gt; &amp;lt;h1&amp;gt;Hi! This is a configmap Index file &amp;lt;/h1&amp;gt; &amp;lt;/html&amp;gt; ➜ k8s101 git:(main) ✗ kubectl apply -f index-html-configmap.yaml configmap/index-html-configmap created craete nginx.yaml with following content link apiVersion: apps/v1 kind: Deployment metadata: name: nginx-deployment namespace: default spec: selector: matchLabels: app: nginx replicas: 2 template: metadata: labels: app: nginx spec: containers: - name: nginx image: nginx:latest ports: - containerPort: 80 volumeMounts: - name: nginx-index-file mountPath: /usr/share/nginx/html/ volumes: - name: nginx-index-file configMap: name: index-html-configmap ➜ k8s101 git:(main) ✗ kubectl apply -f ngnix.</description>
    </item>
    <item>
      <title>Dockerfile RUN </title>
      <link>//localhost:1313/docs/docker/dockerfile-run/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/docker/dockerfile-run/</guid>
      <description>The RUN command is the central executing directive for Dockerfiles. It takes a command as its argument and runs it to form the image. Unlike CMD, it actually is used to build the image (forming another layer on top of the previous one which is committed).&#xA;create dockerfile with following content link FROM ubuntu RUN id RUN useradd --create-home -m -s /bin/bash dev # Add a fun prompt for dev user of my-app # whale: &amp;#34;\xF0\x9F\x90\xB3&amp;#34; # alien:&amp;#34;\xF0\x9F\x91\xBD&amp;#34; # fish:&amp;#34;\xF0\x9F\x90\xA0&amp;#34; # elephant:&amp;#34;\xF0\x9F\x91\xBD&amp;#34; # moneybag:&amp;#34;\xF0\x9F\x92\xB0&amp;#34; RUN echo &amp;#39;PS1=&amp;#34;\[$(tput bold)$(tput setaf 4)\]my-app $(echo -e &amp;#34;\xF0\x9F\x90\xB3&amp;#34;) \[$(tput sgr0)\] [\\u@\\h]:\\W \\$ &amp;#34;&amp;#39; &amp;gt;&amp;gt; /home/dev/.</description>
    </item>
    <item>
      <title>Static Analysis of container images library for container </title>
      <link>//localhost:1313/docs/containersecurity/static-analysis-of-container-images-library-for-container/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/containersecurity/static-analysis-of-container-images-library-for-container/</guid>
      <description>Packetstreamer linkSBOM and vulnerability scanner for container images&#xA;https://github.com/deepfence/package-scanner&#xA;Download binary&#xA;package-scanner_Darwin_arm64.tar.gz package-scanner_Darwin_x86_64.tar.gz package-scanner_Linux_arm64.tar.gz package-scanner_Linux_x86_64.tar.gz package-scanner_darwin_amd64_v1 package-scanner_darwin_arm64 package-scanner_linux_amd64_v1 package-scanner_linux_arm64 ClI usage&#xA;scan a docker image for vulnerabilities&#xA;./package-scannner -source nginx:latest Scan a docker images , filter for critical vulnerabilities&#xA;./package-scanner -source nginx:latest -severity critical Scan a docker images with CVEs&#xA;./package-scanner -source nginx:latest INFO[2023-01-06T15:10:15&amp;#43;05:30] autodetect.go:91 trying to connect to endpoint &amp;#39;unix:///var/run/docker.sock&amp;#39; with timeout &amp;#39;10s&amp;#39; INFO[2023-01-06T15:10:15&amp;#43;05:30] autodetect.go:116 connected successfully using endpoint: unix:///var/run/docker.</description>
    </item>
    <item>
      <title>Docker host security configurations</title>
      <link>//localhost:1313/docs/containersecurity/docker-host-security-configurations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/containersecurity/docker-host-security-configurations/</guid>
      <description>SecComp and AppArmor linkDocker works with major Linux MAC technologies such as AppArmor and SELinux.&#xA;Depending on your Linux distribution, Docker applies a default AppArmor profile to all new containers. According to the Docker documentation, this default profile is “moderately protective while providing wide application compatibility”.&#xA;Docker also lets you start containers without a policy applied, as well as giving you the ability to customize policies to meet specific requirements. This is also very powerful, but can also be prohibitively complex.</description>
    </item>
    <item>
      <title>Dockerfile ARG </title>
      <link>//localhost:1313/docs/docker/dockerfile-arg/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/docker/dockerfile-arg/</guid>
      <description>FROM alpine ENV key1=&amp;#34;ENV is stronger than an ARG&amp;#34; RUN echo ${key1} ARG key1=&amp;#34;not going to matter&amp;#34; RUN echo ${key1} RUN echo ${key2} ARG key2=&amp;#34;defaultValue&amp;#34; RUN echo ${key2} ENV key2=&amp;#34;ENV value takes over&amp;#34; RUN echo ${key2} CMD [&amp;#34;sh&amp;#34;] Build Dockerfile link Dockerfile git:(main) ✗ docker build -t sangam14/arg-dockerfile -f dockerfile.arg . [&amp;#43;] Building 3.5s (11/11) FINISHED =&amp;gt; [internal] load build definition from dockerfile.arg 0.0s =&amp;gt; =&amp;gt; transferring dockerfile: 336B 0.</description>
    </item>
    <item>
      <title>Kubernetes Service  </title>
      <link>//localhost:1313/docs/kubernetes/services/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/kubernetes/services/</guid>
      <description>kubectl explain svc link ➜ k8s101 git:(main) ✗ kubectl explain svc KIND: Service VERSION: v1 DESCRIPTION: Service is a named abstraction of software service (for example, mysql) consisting of local port (for example 3306) that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy. FIELDS: apiVersion &amp;lt;string&amp;gt; APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values.</description>
    </item>
    <item>
      <title>Docker Daemon security configurations</title>
      <link>//localhost:1313/docs/containersecurity/docker-daemon-security-configurations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/containersecurity/docker-daemon-security-configurations/</guid>
      <description>docker daemon security configuration linkInstall docker CE 19.03&#xA;# yum install -y yum-utils device-mapper-persistent-data lvm2 # yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo # yum install -y docker-ce [root@localhost docker]# docker --version Docker version 19.03.8, build afacb8b Daemon security configuration linkThere is no configuration file by default, which needs to be created separately/etc/docker/daemon.json, the following configurations are all local test examples configured on this file.&#xA;{ &amp;#34;icc&amp;#34;: false, &amp;#34;log-level&amp;#34;: &amp;#34;info&amp;#34;, &amp;#34;log-driver&amp;#34;: &amp;#34;json-file&amp;#34;, &amp;#34;log-opts&amp;#34;: { &amp;#34;max-size&amp;#34;: &amp;#34;10m&amp;#34;, &amp;#34;max-file&amp;#34;:&amp;#34;5&amp;#34;, &amp;#34;labels&amp;#34;: &amp;#34;somelabel&amp;#34;, &amp;#34;env&amp;#34;: &amp;#34;os,customer&amp;#34; }, &amp;#34;iptables&amp;#34;: true, &amp;#34;userns-remap&amp;#34;: &amp;#34;default&amp;#34;, &amp;#34;userland-proxy&amp;#34;: false, &amp;#34;experimental&amp;#34;: false, &amp;#34;selinux-enabled&amp;#34;: true, &amp;#34;live-restore&amp;#34;: true, &amp;#34;no-new-privileges&amp;#34;: true, &amp;#34;cgroup-parent&amp;#34;: &amp;#34;/foobar&amp;#34;, &amp;#34;seccomp-profile&amp;#34;: &amp;#34;/etc/docker/seccomp/default-no-chmod.</description>
    </item>
    <item>
      <title>Dockerfile Volume</title>
      <link>//localhost:1313/docs/docker/dockerfile-volume/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/docker/dockerfile-volume/</guid>
      <description>cat dockerfile.vol&#xA;FROM alpine RUN mkdir /myvol RUN echo &amp;#34;hello world&amp;#34; &amp;gt; /myvol/greeting VOLUME /myvol CMD [&amp;#34;sh&amp;#34;] Build above dockerfile link docker build -t sangam14/vol-dockerfile -f dockerfile.vol . [&amp;#43;] Building 0.4s (7/7) FINISHED =&amp;gt; [internal] load build definition from dockerfile.vol 0.0s =&amp;gt; =&amp;gt; transferring dockerfile: 140B 0.0s =&amp;gt; [internal] load .dockerignore 0.0s =&amp;gt; =&amp;gt; transferring context: 2B 0.0s =&amp;gt; [internal] load metadata for docker.io/library/alpine:latest 0.0s =&amp;gt; CACHED [1/3] FROM docker.io/library/alpine 0.</description>
    </item>
    <item>
      <title>Service Type - NodePort,ClusterIP,LoadBalancer </title>
      <link>//localhost:1313/docs/kubernetes/service-type-nodeportclusteriploadbalancer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/kubernetes/service-type-nodeportclusteriploadbalancer/</guid>
      <description>Service Type1: NodePort linkNodePort service helps expose the Service on each Node’s IP at a static port (the NodePort). NodePort The port is available to all the workers in the cluster. A ClusterIP Service, to which the NodePort Service routes are automatically created. One would be able to contact the NodePort Service, from outside the cluster, by requesting :. The port on the POD is called the targetPort and the one connecting the NodePort service to the POD is called port.</description>
    </item>
    <item>
      <title>Content Trust and Integrity checks</title>
      <link>//localhost:1313/docs/containersecurity/content-trust-and-integrity-checks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/containersecurity/content-trust-and-integrity-checks/</guid>
      <description>Content Trust and Integrity checks&#xA;Docker Content Trust (DCT) makes it simple and easy to verify the integrity and the publisher of images that you download and run. This is especially important when pulling images over untrusted networks such as the internet.&#xA;docker trust key generate sangam Generating key for sangam... Enter passphrase for new nigel key with ID 1f78609: Repeat passphrase for new nigel key with ID 1f78609: Successfully generated and loaded private key.</description>
    </item>
    <item>
      <title>Dockerfile USER</title>
      <link>//localhost:1313/docs/docker/dockerfile-user/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/docker/dockerfile-user/</guid>
      <description>cat dockerfile.user&#xA;FROM alpine USER dockerworkshop:dockerworkshop CMD [&amp;#34;sh&amp;#34;] build dockerfile link docker build -t sangam14/user-dockerfile -f dockerfile.user . [&amp;#43;] Building 0.1s (5/5) FINISHED =&amp;gt; [internal] load build definition from dockerfile.user 0.0s =&amp;gt; =&amp;gt; transferring dockerfile: 105B 0.0s =&amp;gt; [internal] load .dockerignore 0.0s =&amp;gt; =&amp;gt; transferring context: 2B 0.0s =&amp;gt; [internal] load metadata for docker.io/library/alpine:latest 0.0s =&amp;gt; CACHED [1/1] FROM docker.io/library/alpine 0.0s =&amp;gt; exporting to image 0.0s =&amp;gt; =&amp;gt; exporting layers 0.</description>
    </item>
    <item>
      <title>NetworkPolicy </title>
      <link>//localhost:1313/docs/kubernetes/networkpolicy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/kubernetes/networkpolicy/</guid>
      <description>Creating effective Kubernetes Network Policies involves defining rules that explicitly allow or deny traffic to and from your pods. Here are some example policies to help you understand how to set up both restrictive (deny) and permissive (allow) behaviors in your cluster.&#xA;1. Default Deny All Traffic to a Namespace linkA common starting point in securing a namespace in Kubernetes is to deny all traffic to all pods within a namespace.</description>
    </item>
    <item>
      <title>Docker Registry security configurations </title>
      <link>//localhost:1313/docs/containersecurity/docker-registry-security-configurations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/containersecurity/docker-registry-security-configurations/</guid>
      <description>What will you learn?&#xA;InteractIing with insecure registry with curl Fetching images using curl and analyzing image layers Attacking protected Docker registry Backdooring images and leveraging auto-deployment mechanisms to attack Docker host&#xA;Intracting with Insecure Registry link [node1] (local) root@192.168.0.18 ~ $ docker run -d \ -p 5000:5000 \ --name registry \ -v /registry/data:/var/lib/registry \ --restart always \ registry:2 Unable to find image &amp;#39;registry:2&amp;#39; locally 2: Pulling from library/registry ca7dd9ec2225: Pull complete c41ae7ad2b39: Pull complete 1ed0fc8a6161: Pull complete 21df229223d2: Pull complete 626897ccab21: Pull complete Digest: sha256:ce14a6258f37702ff3cd92232a6f5b81ace542d9f1631966999e9f7c1ee6ddba Status: Downloaded newer image for registry:2 729cabb707e247e548ff84aa096c03e922e39e78bbe3c65753478305575576a6 check</description>
    </item>
    <item>
      <title>Dockerfile HEALTHCHECK</title>
      <link>//localhost:1313/docs/docker/dockerfile-healthcheck/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/docker/dockerfile-healthcheck/</guid>
      <description>cat Dockerfile&#xA;FROM nginx build docker container link docker build -t sangam14/healthcheck-dockerfile -f dockerfile.healthcheck . [&amp;#43;] Building 1.4s (6/6) FINISHED =&amp;gt; [internal] load build definition from dockerfile.healthcheck 0.0s =&amp;gt; =&amp;gt; transferring dockerfile: 244B 0.0s =&amp;gt; [internal] load .dockerignore 0.0s =&amp;gt; =&amp;gt; transferring context: 2B 0.0s =&amp;gt; [internal] load metadata for docker.io/library/alpine:latest 0.0s =&amp;gt; CACHED [1/2] FROM docker.io/library/alpine 0.0s =&amp;gt; [2/2] RUN apk add curl 1.3s =&amp;gt; exporting to image 0.0s =&amp;gt; =&amp;gt; exporting layers 0.</description>
    </item>
    <item>
      <title>Use Core DNS</title>
      <link>//localhost:1313/docs/kubernetes/use-core-dns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/kubernetes/use-core-dns/</guid>
      <description>sangam@sangam:~$ kubectl create service clusterip my-service &amp;ndash;tcp=8080:8080 service/my-service created sangam@sangam:~$ kubectl get service NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE kubernetes ClusterIP 10.96.0.1 443/TCP 45h my-service ClusterIP 10.106.213.25 8080/TCP 5s sangam@sangam:~$ kubectl run busybox &amp;ndash;image=busybox -it &amp;ndash; /bin/sh If you don&amp;rsquo;t see a command prompt, try pressing enter. / # / # / # nslookup 10.106.213.25 Server:&#x9;10.96.0.10 Address:&#x9;10.96.0.10:53&#xA;25.213.106.10.in-addr.arpa&#x9;name = my-service.default.svc.cluster.local&#xA;/ # exit</description>
    </item>
    <item>
      <title>Dockerfile ENV</title>
      <link>//localhost:1313/docs/docker/dockerfile-env/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/docker/dockerfile-env/</guid>
      <description>cat dockerfile&#xA;FROM alpine ENV appDescription This app is a sample of using ENV instructions ENV appName=env-demo ENV note1=&amp;#34;The First Note First&amp;#34; note2=The\ Second\ Note\ Second \ note3=&amp;#34;The Third Note Third&amp;#34; ENV changeMe=&amp;#34;Old Value&amp;#34; CMD [&amp;#34;sh&amp;#34;] build dockerfile link ➜ Dockerfile git:(main) ✗ docker build -t sangam14/env-dockerfile -f dockerfile.env . [&amp;#43;] Building 0.1s (5/5) FINISHED =&amp;gt; [internal] load build definition from dockerfile.env 0.0s =&amp;gt; =&amp;gt; transferring dockerfile: 279B 0.0s =&amp;gt; [internal] load .</description>
    </item>
    <item>
      <title>DockerScan</title>
      <link>//localhost:1313/docs/containersecurity/dockerscan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/containersecurity/dockerscan/</guid>
      <description>DockerScan linkDocker Scan Support actions for docker registory scanning , image analysis and image meta information exaction to look for password , URL/ IP etc in the envirmonment variavle and any kind of sudo call by user&#xA;create a directory for this $ sudo mkdir dockersec-2 $ cd dockersec-2 check pyhon version which mustt be greater then 3.5 and must have pip installed&#xA;$ python3 --version $ sudo apt install python3-pip $ which pip3 `` Install Dockerscan with pip3 $ sudo /user/bin/pip3 install dockerscan</description>
    </item>
    <item>
      <title> Dive </title>
      <link>//localhost:1313/docs/containersecurity/dive/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/containersecurity/dive/</guid>
      <description>Dive link Ubuntu /Debian wget https://github.com/wagoodman/dive/releases/download/v0.9.2/dive_0.9.2_linux_amd64.deb sudo apt install ./dive_0.9.2_linux_amd64.deb RHEL/CemtOS curl -OL https://github.com/wagoodman/dive/releases/download/v0.9.2/dive_0.9.2_linux_amd64.rpm rpm -i dive_0.9.2_linux_amd64.rpm Arch Linux ay -S dive Mac OS X&#xA;brew install dive How to use Dive linkTo analyze a Docker image simply run dive with an image tag/id/digest:&#xA;$ dive &amp;lt;your-image-tag&amp;gt; or if you want to build your image then jump straight into analyzing it:&#xA;$ dive build -t &amp;lt;some-tag&amp;gt; example ngnix image&#xA;another tool that make this all more easy</description>
    </item>
    <item>
      <title>Dockerfile ONBUILD</title>
      <link>//localhost:1313/docs/docker/dockerfile-onbuild/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/docker/dockerfile-onbuild/</guid>
      <description>The ONBUILD instruction linkThe ONBUILD instruction is a trigger. It sets instructions that will be executed when another image is built from the image being build.&#xA;This is useful for building images which will be used as a base to build other images.&#xA;ONBUILD COPY . /src You can&amp;rsquo;t chain ONBUILD instructions with ONBUILD. ONBUILD can&amp;rsquo;t be used to trigger FROM instructions.&#xA;FROM nginx:1.16-alpine WORKDIR /usr/share/nginx/html ONBUILD COPY index.html . build dockerfile link docker build -t sangam14/onbuild-dockerfile -f dockerfile.</description>
    </item>
    <item>
      <title>Docker events</title>
      <link>//localhost:1313/docs/containersecurity/docker-events/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/containersecurity/docker-events/</guid>
      <description>Docker events linkDocker events describe the activities taken by your Docker daemon. Most interactions with objects such as containers, images, volumes, and networks record an event, creating a log that you can use to inspect past changes.&#xA;There are many different kinds of event that identify specific changes in your environment:&#xA;Creating and removing containers Container health check statuses Commands executed inside containers with docker exec Pulling and pushing images Creating, destroying, mounting, and unmounting volumes Enabling and disabling Docker daemon plugins $ docker run --rm hello-world Several events should now appear in the terminal window that’s running the docker events command:</description>
    </item>
    <item>
      <title>Multi-Container CLI </title>
      <link>//localhost:1313/docs/docker/multi-container-cli/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/docker/multi-container-cli/</guid>
      <description>We will create two containers (linux1, linux2) based on the same image (ubuntu) link docker run -it -d --rm --name linux1 ubuntu /bin/bash additional flags: -dstarts the container as “detached”. Use “docker attach” to attach to it later on. --rm cleans up the container after stopping. The container will be removed, basically the same as “docker rm container_identifier” after stopping the container. So everything is kept tidy. --name will give the container a dedicated name, which makes it easier to address the container later on.</description>
    </item>
    <item>
      <title>Werf A solution for implementing efficient and consistent software</title>
      <link>//localhost:1313/blog/werf/</link>
      <pubDate>Sun, 19 Feb 2023 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/blog/werf/</guid>
      <description>Install Werf ➜ ~ curl -sSLO https://werf.io/install.sh &amp;amp;&amp;amp; chmod &amp;#43;x install.sh ➜ ~ ./install.sh --version 1.2 --channel stable [INPUT REQUIRED] Current login shell is &amp;#34;zsh&amp;#34;. Press ENTER to setup werf for this shell or choose another one. [b]ash/[z]sh/[a]bort? Default: zsh. z [INPUT REQUIRED] trdl is going to be installed in &amp;#34;/Users/sangambiradar/bin/&amp;#34;. Add this directory to your $PATH in &amp;#34;/Users/sangambiradar/.zshrc&amp;#34; and &amp;#34;/Users/sangambiradar/.zprofile&amp;#34;? (strongly recommended) [y]es/[a]bort/[s]kip? Default: yes. yes [INFO] Installing trdl to &amp;#34;/Users/sangambiradar/bin/&amp;#34;.</description>
    </item>
    <item>
      <title>Docker Compose Basics</title>
      <link>//localhost:1313/docs/docker/docker-compose-basics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/docker/docker-compose-basics/</guid>
      <description>cat Dockerfile&#xA;FROM php:7.2-apache COPY index.php /var/www/html add index.php file&#xA;&amp;lt;?php echo &amp;#34;hello world \n\n&amp;#34;; creat docker-compose.yaml&#xA;version: &amp;#39;3&amp;#39; services: phpapp: ports: - &amp;#34;8080:80&amp;#34; build: context: ./ dockerfile: Dockerfile to run docker compose&#xA;docker compose up --build output&#xA;1-DC git:(main) ✗ docker compose up [&amp;#43;] Building 21.2s (10/10) FINISHED =&amp;gt; [internal] booting buildkit 3.8s =&amp;gt; =&amp;gt; pulling image moby/buildkit:buildx-stable-1 2.8s =&amp;gt; =&amp;gt; creating container buildx_buildkit_great_brahmagupta0 1.1s =&amp;gt; [internal] load build definition from Dockerfile 0.</description>
    </item>
    <item>
      <title>Scanning Docker for vulnerabilities with ThraetMappeper </title>
      <link>//localhost:1313/docs/containersecurity/scanning-docker-for-vulnerabilities-with-thraetmappeper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/containersecurity/scanning-docker-for-vulnerabilities-with-thraetmappeper/</guid>
      <description>Orignally published on CloudNativeFolks&#xA;ThreatMapper&#xA;ThreatMapper hunts for threats in your production platforms, and ranks these threats based on their risk-of-exploit. It uncovers vulnerable software components, exposed secrets and deviations from good security practice. ThreatMapper uses a combination of agent-based inspection and agent-less monitoring to provide the widest possible coverage to detect threats.&#xA;ThreatMapper Open source cloud native security observability platform.Linux, K8s, AWS Fargate and more. TypeScript 4.5k 562 ThreatMapper carries on the good &amp;lsquo;shift left&amp;rsquo; security practices that you already employ in your development pipelines.</description>
    </item>
    <item>
      <title>Compose Volume Mount</title>
      <link>//localhost:1313/docs/docker/compose-volume-mount/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/docker/compose-volume-mount/</guid>
      <description>Lets build docker compose file link version: &amp;#39;3&amp;#39; services: phpapp: image: php:7.2-apache ports: - &amp;#34;8080:80&amp;#34; volumes: - &amp;#34;./:/var/www/html&amp;#34; above when we do docker compose up it will start apache with php 7.2 it will mount corrent directory to /var/www/html also it mount port 80 of the container to port 8080 on the host&#xA;create index.php with following content link &amp;lt;?php echo &amp;#34;hello world \n\n&amp;#34;; run with docker compose link 2-DC-Vol-Mount git:(main) ✗ docker compose up [&amp;#43;] Running 15/15 ⠿ phpapp Pulled 13.</description>
    </item>
    <item>
      <title>Sock Shop Docker Compose and Weave</title>
      <link>//localhost:1313/docs/containersecurity/sock-shop-docker-compose-and-weave/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/containersecurity/sock-shop-docker-compose-and-weave/</guid>
      <description>Sock Shop Docker Compose &amp;amp; Weave&#xA;Pre-requisites Install Docker Install Weave Scope Install Weave Net&#xA;git clone https://github.com/microservices-demo/microservices-demo cd microservices-demo curl -sSL https://get.docker.com/ | sh apt-get install -yq python-pip build-essential python-dev pip install docker-compose curl -L git.io/weave -o /usr/local/bin/weave chmod a&amp;#43;x /usr/local/bin/weave Launch Weave Scope&#xA;sudo curl -L git.io/scope -o /usr/local/bin/scope sudo chmod a&amp;#43;x /usr/local/bin/scope scope launch Weave launch&#xA;weave launch docker-compose -f deploy/docker-compose-weave/docker-compose.yml up -d </description>
    </item>
    <item>
      <title>Custom Dockerfile with Compose</title>
      <link>//localhost:1313/docs/docker/custom-dockerfile-with-compose/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/docker/custom-dockerfile-with-compose/</guid>
      <description>Build Own Dockerfile and Docker Compose with Custom configuration linkcrate docker compose file with following content&#xA;version: &amp;#39;3&amp;#39; services: phpapp: build: context: ./ dockerfile: Dockerfile image: phpapp:123 ports: - &amp;#34;8080:80&amp;#34; volumes: - &amp;#34;./:/var/www/html&amp;#34; container_name: my-php-app here using dockerfile to generate an image mount folder inside your directory automatically create index.php with following content link &amp;lt;?php phpinfo(); build docker compose file link 3-DC-Custom git:(main) ✗ docker compose up [&amp;#43;] Running 0/1 ⠿ phpapp Warning 3.</description>
    </item>
    <item>
      <title>PHP, Apache, and DB with Compose</title>
      <link>//localhost:1313/docs/docker/php-apache-and-db-with-compose/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/docker/php-apache-and-db-with-compose/</guid>
      <description>we will see detach form logs upon start and user multiservices in one docker container&#xA;version: &amp;#39;3&amp;#39; services: phpapp: build: context: ./ dockerfile: Dockerfile image: phpapp:123 ports: - &amp;#34;8080:80&amp;#34; volumes: - &amp;#34;./:/var/www/html&amp;#34; container_name: myphpapp-app db: image: mysql:5.7 restart: always environment: MYSQL_ROOT_PASSWORD: my!!!root!!!pw container_name: myphpapp-db here you see two services phpapp and myphpapp-app and image called phpapp with 123 tag&#xA;another service called db form mysql this container restarts always which means it crashes ?</description>
    </item>
    <item>
      <title>Host Volume Mount</title>
      <link>//localhost:1313/docs/docker/host-volume-mount/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/docker/host-volume-mount/</guid>
      <description>we already used database with web app but docker containers are ephermal. this means they are losing data once removed or re-started so somewhere need to find data persistent&#xA;create docker-compose.yml using following content&#xA;version: &amp;#39;3&amp;#39; services: db: image: mysql:latest restart: always container_name: myphpapp-db environment: MYSQL_ROOT_PASSWORD: somepass MYSQL_DATABASE: somedatabase dbclient: image: mysql:latest depends_on: - db command: mysql -uroot -psomepass -hdb MYSQL_DATABASE will create an empty database with the name &amp;ldquo;somedatabase&amp;rdquo; at first</description>
    </item>
    <item>
      <title>Named Volume Mount</title>
      <link>//localhost:1313/docs/docker/named-volume-mount/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/docker/named-volume-mount/</guid>
      <description>create volume link 6-DC-name-volume git:(main) ✗ docker volume create --name my-vol my-vol create docker-compose.yml with following content link version: &amp;#39;3.7&amp;#39; services: db: image: mysql:latest restart: always container_name: myphpapp-db environment: MYSQL_ROOT_PASSWORD: somepass MYSQL_DATABASE: somedatabase volumes: - my-vol:/var/lib/mysql volumes: my-vol: name: my-vol run docker compose link docker compose up -d WARN[0000] volume &amp;#34;my-vol&amp;#34; already exists but was not created by Docker Compose. Use `external: true` to use an existing volume [&amp;#43;] Running 1/1 ⠿ Container myphpapp-db Started 0.</description>
    </item>
    <item>
      <title>Compose Build Command</title>
      <link>//localhost:1313/docs/docker/compose-build-command/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/docker/compose-build-command/</guid>
      <description>Docker Compose Build Command link docker compose build [OPTIONS] [SERVICE...] If you change a service’s Dockerfile or the contents of its build directory, run docker compose build to rebuild it.&#xA;--build-arg&#x9;Set build-time variables for services.&#xA;--no-cache&#x9;Do not use cache when building the image --progress&#x9;auto&#x9;Set type of progress output (auto, tty, plain, quiet) .&#xA;--pull&#x9;Always attempt to pull a newer version of the image..&#xA;--push&#x9;Push service images.</description>
    </item>
    <item>
      <title>Compose Config Command</title>
      <link>//localhost:1313/docs/docker/compose-config-command/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/docker/compose-config-command/</guid>
      <description>create dockerfile with following content link # syntax=docker/dockerfile:1 FROM python:3.7-alpine WORKDIR /code ENV FLASK_APP=app.py ENV FLASK_RUN_HOST=0.0.0.0 RUN apk add --no-cache gcc musl-dev linux-headers COPY requirements.txt requirements.txt RUN pip install -r requirements.txt EXPOSE 5000 COPY . . CMD [&amp;#34;flask&amp;#34;, &amp;#34;run&amp;#34;] create app.py with following content link import time import redis from flask import Flask app = Flask(__name__) cache = redis.Redis(host=&amp;#39;redis&amp;#39;, port=6379) def get_hit_count(): retries = 5 while True: try: return cache.incr(&amp;#39;hits&amp;#39;) except redis.</description>
    </item>
    <item>
      <title>Compose CP Command</title>
      <link>//localhost:1313/docs/docker/compose-cp-command/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/docker/compose-cp-command/</guid>
      <description>Copy files/folders between a service container and the local filesystem link # Syntax to Copy from Container to Docker Host docker cp {options} CONTAINER:SRC_PATH DEST_PATH # Syntax to Copy from Docker Host to Container docker cp {options} SRC_PATH CONTAINER:DEST_PATH lets run ngnix container link version: &amp;#39;3&amp;#39; services: web: image: nginx:latest run docker compose up link docker compose -f docker-compose-ngnix.yml up check running container link ➜ dockerworkshop git:(main) ✗ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 008940fdbed8 nginx:latest &amp;#34;/docker-entrypoint.</description>
    </item>
    <item>
      <title>Compose Create Command</title>
      <link>//localhost:1313/docs/docker/compose-create-command/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/docker/compose-create-command/</guid>
      <description>create docker-compose.yml with following content link version: &amp;#34;3.9&amp;#34; services: web: build: . ports: - &amp;#34;8000:5000&amp;#34; redis: image: &amp;#34;redis:alpine&amp;#34; Creates containers for a service. link ➜ 7-DC-CLI git:(main) ✗ docker compose create [&amp;#43;] Running 7/7 ⠿ redis Pulled 6.1s ⠿ af6eaf76a39c Already exists 0.0s ⠿ 5015c79ed515 Pull complete 0.9s ⠿ 2ca28624189f Pull complete 1.0s ⠿ 4691452befb1 Pull complete 1.6s ⠿ 746fa87aff8c Pull complete 2.1s ⠿ b8496ad2d107 Pull complete 2.2s WARN[0006] Found orphan containers ([7-dc-cli-client-1]) for this project.</description>
    </item>
    <item>
      <title>Flannel is a network fabric for containers, designed for Kubernetes.</title>
      <link>//localhost:1313/blog/flannel/</link>
      <pubDate>Fri, 17 Feb 2023 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/blog/flannel/</guid>
      <description>kubenetes networking Networking details Platforms like Kubernetes assume that each container (pod) has a unique, routable IP inside the cluster. The advantage of this model is that it removes the port mapping complexities that come from sharing a single host IP.&#xA;Flannel is responsible for providing a layer 3 IPv4 network between multiple nodes in a cluster. Flannel does not control how containers are networked to the host, only how the traffic is transported between hosts.</description>
    </item>
    <item>
      <title>Compose Down Command </title>
      <link>//localhost:1313/docs/docker/compose-down-command/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/docker/compose-down-command/</guid>
      <description>create docker-compose.yml with following content link version: &amp;#34;3.9&amp;#34; services: web: build: . ports: - &amp;#34;8000:5000&amp;#34; redis: image: &amp;#34;redis:alpine&amp;#34; Create docker compose up link docker compose up WARN[0000] Found orphan containers ([7-dc-cli-client-1]) for this project. If you removed or renamed this service in your compose file, you can run this command with the --remove-orphans flag to clean it up. Attaching to 7-dc-cli-redis-1, 7-dc-cli-web-1 7-dc-cli-redis-1 | 1:C 04 Mar 2023 14:23:46.156 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo 7-dc-cli-redis-1 | 1:C 04 Mar 2023 14:23:46.</description>
    </item>
    <item>
      <title>Compose Events Command </title>
      <link>//localhost:1313/docs/docker/compose-events-command/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/docker/compose-events-command/</guid>
      <description>here is sample voting app link cat docker-compose.yml # version is now using &amp;#34;compose spec&amp;#34; # v2 and v3 are now combined! # docker-compose v1.27&amp;#43; required services: vote: build: ./vote # use python rather than gunicorn for local dev command: python app.py depends_on: redis: condition: service_healthy healthcheck: test: [&amp;#34;CMD&amp;#34;, &amp;#34;curl&amp;#34;, &amp;#34;-f&amp;#34;, &amp;#34;http://localhost&amp;#34;] interval: 15s timeout: 5s retries: 3 start_period: 10s volumes: - ./vote:/app ports: - &amp;#34;5000:80&amp;#34; networks: - front-tier - back-tier result: build: .</description>
    </item>
    <item>
      <title>Compose Exec Command </title>
      <link>//localhost:1313/docs/docker/compose-exec-command/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/docker/compose-exec-command/</guid>
      <description>Docker Compose Exec into result service link docker compose exec result sh # ls Dockerfile docker-compose.test.yml package-lock.json package.json server.js tests views # cat docker-compose.test.yml version: &amp;#39;2&amp;#39; services: sut: build: ./tests/ depends_on: - vote - result - worker networks: - front-tier vote: build: ../vote/ ports: [&amp;#34;80&amp;#34;] depends_on: - redis - db networks: - front-tier - back-tier result: build: . ports: [&amp;#34;80&amp;#34;] depends_on: - redis - db networks: - front-tier - back-tier worker: build: .</description>
    </item>
    <item>
      <title>Compose Images Command</title>
      <link>//localhost:1313/docs/docker/compose-images-command/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/docker/compose-images-command/</guid>
      <description> example-voting-app git:(main) docker compose images CONTAINER REPOSITORY TAG IMAGE ID SIZE example-voting-app-db-1 postgres 15-alpine 68d4a8d9d3d9 241MB example-voting-app-redis-1 redis alpine 1339d05b97a4 30.4MB example-voting-app-result-1 example-voting-app-result latest 223b94fc00ae 254MB example-voting-app-vote-1 example-voting-app-vote latest 5c1cf62b540c 135MB example-voting-app-worker-1 example-voting-app-worker latest 8f82fda1dae8 195MB </description>
    </item>
    <item>
      <title>Compose Kill Command</title>
      <link>//localhost:1313/docs/docker/compose-kill-command/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/docker/compose-kill-command/</guid>
      <description>Forces running containers to stop by sending a SIGKILL signal. Optionally the signal can be passed : link example-voting-app git:(main) docker-compose kill -s SIGINT [&amp;#43;] Running 4/0 ⠿ Container example-voting-app-redis-1 Killed 0.0s ⠿ Container example-voting-app-worker-1 Killed 0.0s ⠿ Container example-voting-app-db-1 Killed 0.0s ⠿ Container example-voting-app-result-1 Killed 0.0s </description>
    </item>
    <item>
      <title>Compose Logs Command</title>
      <link>//localhost:1313/docs/docker/compose-logs-command/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/docker/compose-logs-command/</guid>
      <description>View output from containers link ➜ example-voting-app git:(main) docker-compose logs example-voting-app-worker-1 | Connected to db example-voting-app-result-1 | [nodemon] 2.0.21 example-voting-app-worker-1 | Found redis at 172.20.0.2 example-voting-app-worker-1 | Connecting to redis example-voting-app-result-1 | [nodemon] to restart at any time, enter `rs` example-voting-app-result-1 | [nodemon] watching path(s): *.* example-voting-app-result-1 | [nodemon] watching extensions: js,mjs,json example-voting-app-result-1 | [nodemon] starting `node server.js` example-voting-app-result-1 | Sat, 04 Mar 2023 18:00:16 GMT body-parser deprecated bodyParser: use individual json/urlencoded middlewares at server.</description>
    </item>
    <item>
      <title>Compose ls Command</title>
      <link>//localhost:1313/docs/docker/compose-ls-command/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/docker/compose-ls-command/</guid>
      <description>List running compose projects link docker-compose ls NAME STATUS CONFIG FILES example-voting-app running(4) /Users/sangambiradar/Documents/GitHub/dockerworkshop/workshop/Docker102/Docker-Compose/example-voting-app/docker-compose.yml ➜ example-voting-app git:(main) </description>
    </item>
    <item>
      <title>Compose Pause unpause Command</title>
      <link>//localhost:1313/docs/docker/compose-pause-unpause-command/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/docker/compose-pause-unpause-command/</guid>
      <description>example-voting-app git:(main) docker compose pause [&amp;#43;] Running 4/0 ⠿ Container example-voting-app-db-1 Paused 0.0s ⠿ Container example-voting-app-redis-1 Paused 0.0s ⠿ Container example-voting-app-worker-1 Paused 0.0s ⠿ Container example-voting-app-result-1 Paused 0.0s ➜ example-voting-app git:(main) Pauses running containers of a service. They can be unpaused with docker compose unpause. link docker compose unpause [&amp;#43;] Running 4/0 ⠿ Container example-voting-app-worker-1 Unpaused 0.0s ⠿ Container example-voting-app-redis-1 Unpaused 0.0s ⠿ Container example-voting-app-result-1 Unpaused 0.0s ⠿ Container example-voting-app-db-1 Unpaused 0.</description>
    </item>
    <item>
      <title>Compose Port Command</title>
      <link>//localhost:1313/docs/docker/compose-port-command/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/docker/compose-port-command/</guid>
      <description>Print the public port for a port binding. link docker compose port result 80 0.0.0.0:5001 ➜ example-voting-app git:(main) </description>
    </item>
    <item>
      <title>Compose Ps Command</title>
      <link>//localhost:1313/docs/docker/compose-ps-command/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/docker/compose-ps-command/</guid>
      <description>List containers link docker compose ps NAME IMAGE COMMAND SERVICE CREATED STATUS PORTS example-voting-app-db-1 postgres:15-alpine &amp;#34;docker-entrypoint.s…&amp;#34; db 4 hours ago Up About an hour (healthy) 5432/tcp example-voting-app-redis-1 redis:alpine &amp;#34;docker-entrypoint.s…&amp;#34; redis 4 hours ago Up About an hour (healthy) 6379/tcp example-voting-app-result-1 example-voting-app-result &amp;#34;nodemon server.js&amp;#34; result About an hour ago Up About an hour 0.0.0.0:5858-&amp;gt;5858/tcp, 0.0.0.0:5001-&amp;gt;80/tcp example-voting-app-worker-1 example-voting-app-worker &amp;#34;dotnet Worker.dll&amp;#34; worker About an hour ago Up About an hour ➜ example-voting-app git:(main) </description>
    </item>
    <item>
      <title>CertManager - Automatically provision and manage TLS certificates in Kubernetes</title>
      <link>//localhost:1313/blog/certmanager/</link>
      <pubDate>Tue, 14 Feb 2023 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/blog/certmanager/</guid>
      <description>Start Minikube minikube-certmanager git:(main) minikube start 😄 minikube v1.30.0 on Darwin 13.3.1 (arm64) ✨ Using the docker driver based on existing profile 👍 Starting control plane node minikube in cluster minikube 🚜 Pulling base image ... 🏃 Updating the running docker &amp;#34;minikube&amp;#34; container ... ❗ Image was not built for the current minikube version. To resolve this you can delete and recreate your minikube cluster using the latest images. Expected minikube version: v1.</description>
    </item>
    <item>
      <title>Compose Pull Command</title>
      <link>//localhost:1313/docs/docker/compose-pull-command/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/docker/compose-pull-command/</guid>
      <description>Pull service images link example-voting-app git:(main) docker compose pull [&amp;#43;] Running 5/5 ⠿ vote Skipped - No image to be pulled 0.0s ⠿ result Skipped - No image to be pulled 0.0s ⠿ worker Skipped - No image to be pulled 0.0s ⠿ redis Pulled 2.8s ⠿ db Pulled 2.8s </description>
    </item>
    <item>
      <title>Compose Push Command</title>
      <link>//localhost:1313/docs/docker/compose-push-command/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/docker/compose-push-command/</guid>
      <description>Push service images link services: service1: build: . image: localhost:5000/yourimage ## goes to local registry service2: build: . image: your-dockerid/yourimage ## goes to your repository on Docker Hub </description>
    </item>
    <item>
      <title>Compose Restart Command</title>
      <link>//localhost:1313/docs/docker/compose-restart-command/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/docker/compose-restart-command/</guid>
      <description>restart service images link docker compose restart [&amp;#43;] Running 5/5 ⠿ Container example-voting-app-db-1 Started 0.7s ⠿ Container example-voting-app-redis-1 Started 0.7s ⠿ Container example-voting-app-result-1 Started 0.6s ⠿ Container example-voting-app-vote-1 Started 0.5s ⠿ Container example-voting-app-worker-1 Started 0.4s ➜ example-voting-app git:(main) </description>
    </item>
    <item>
      <title>Compose Rm Command </title>
      <link>//localhost:1313/docs/docker/compose-rm-command/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/docker/compose-rm-command/</guid>
      <description>Removes stopped service containers link ➜ example-voting-app git:(main) docker compose stop [&amp;#43;] Running 5/5 ⠿ Container example-voting-app-vote-1 Stopped 0.3s ⠿ Container example-voting-app-result-1 Stopped 0.3s ⠿ Container example-voting-app-worker-1 Stopped 0.1s ⠿ Container example-voting-app-db-1 Stopped 0.1s ⠿ Container example-voting-app-redis-1 Stopped 0.2s ➜ example-voting-app git:(main) docker compose rm ? Going to remove example-voting-app-vote-1, example-voting-app-result-1, example-voting-app-worker-1, example-voting-app-db-1, example-voting-app-redis-1 Yes [&amp;#43;] Running 5/0 ⠿ Container example-voting-app-redis-1 Removed 0.0s ⠿ Container example-voting-app-vote-1 Removed 0.0s ⠿ Container example-voting-app-result-1 Removed 0.</description>
    </item>
    <item>
      <title>Compose Run Command</title>
      <link>//localhost:1313/docs/docker/compose-run-command/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/docker/compose-run-command/</guid>
      <description>➜ example-voting-app git:(main) docker compose run db PostgreSQL Database directory appears to contain a database; Skipping initialization 2023-03-04 19:16:58.496 UTC [1] LOG: starting PostgreSQL 15.2 on aarch64-unknown-linux-musl, compiled by gcc (Alpine 12.2.1_git20220924-r4) 12.2.1 20220924, 64-bit 2023-03-04 19:16:58.496 UTC [1] LOG: listening on IPv4 address &amp;#34;0.0.0.0&amp;#34;, port 5432 2023-03-04 19:16:58.496 UTC [1] LOG: listening on IPv6 address &amp;#34;::&amp;#34;, port 5432 2023-03-04 19:16:58.498 UTC [1] LOG: listening on Unix socket &amp;#34;/var/run/postgresql/.s.PGSQL.5432&amp;#34; 2023-03-04 19:16:58.</description>
    </item>
    <item>
      <title>Local Network Setup</title>
      <link>//localhost:1313/docs/docker/local-network-setup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/docker/local-network-setup/</guid>
      <description>Docker network create command syntax link docker network create --help view current networks link docker network ls clear Create a new overlay network, with all default options link docker network create -d overlay defaults-over Create a new overlay network with specific IP settings link docker network create -d overlay \ --subnet=172.30.0.0/24 \ --ip-range=172.30.0.0/28 \ --gateway=172.30.0.254 \ specifics-over view current networks again link docker network ls Initial validation link docker network inspect specifics-over --format &amp;#39;{{json .</description>
    </item>
    <item>
      <title>Remote Network Setup</title>
      <link>//localhost:1313/docs/docker/remote-network-setup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/docker/remote-network-setup/</guid>
      <description>Docker network managment command link docker network --help clear Starting on ubuntu-node01: Install and setup the weave driver link sudo curl -L git.io/weave -o /usr/local/bin/weave sudo chmod a&amp;#43;x /usr/local/bin/weave export CHECKPOINT_DISABLE=1 weave launch eval $(weave env) clear&#xA;Now on ubuntu-node02: Install and setup the weave driver link sudo curl -L git.io/weave -o /usr/local/bin/weave sudo chmod a&amp;#43;x /usr/local/bin/weave export CHECKPOINT_DISABLE=1 weave launch eval $(weave env) clear&#xA;Now, back on ubuntu-node01:Bring node02 in as a peer on node01&amp;rsquo;s weave network link weave connect ubuntu-node02 Starting with ubuntu-node01:Run a container detached on node01 link docker container run -d --name app01 alpine tail -f /dev/null Now, launch a container on ubuntu-node02: Run a container detached on node02 link docker container run -d --name app02 alpine tail -f /dev/null Since we are on node02, we will check there first&amp;hellip; linkFrom inside the app02 container running on node02, linklet&amp;rsquo;s ping the app01 container running on node01 link docker container exec -it app02 ping -c 4 app01 Similarly, from inside the app01 container running on node01, linklet&amp;rsquo;s ping the app02 container running on node02 link docker container exec -it app01 ping -c 4 app02 clear</description>
    </item>
    <item>
      <title>Newtorking in Docker Compose</title>
      <link>//localhost:1313/docs/docker/newtorking-in-docker-compose/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/docker/newtorking-in-docker-compose/</guid>
      <description>creating and using networks in docker-compose.yml link version: &amp;#34;3.7&amp;#34; services: app1: image: httpd:latest container_name: app1 ports: - 8080:80 networks: - app1_net networks: app1_net: run docker compose up link docker-compose up Open browser link http://localhost:8080 Observe the output&#xA;On a second terminal link docker ps Observe the networking part! link docker inspect app1 Stops the docker-compose link docker-compose rm </description>
    </item>
    <item>
      <title>Compose Networking with Nginx</title>
      <link>//localhost:1313/docs/docker/compose-networking-with-nginx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/docker/compose-networking-with-nginx/</guid>
      <description>create docker-compose.yml with following content :&#xA;version: &amp;#34;3.7&amp;#34; services: web: image: nginx:alpine volumes: - ./nginx.conf:/etc/nginx/nginx.conf ports: - 8080:80 networks: - app1_net - app2_net app1: image: httpd:latest networks: - app1_net app2: image: httpd:latest networks: - app2_net networks: app1_net: app2_net: the following nginx.conf configuration file in the same directory: link events {} http { server { listen 80; listen [::]:80; server_name example.com; location / { proxy_pass http://app1:80/; } location /app2 { proxy_pass http://app2:80/; } } } run docker compose link docker compose up Go to http://localhost:8080 and observer the command line link•&#x9;It will show you the nignx-container web_1 container (reverse_proxy) was requested •&#x9;And forwarded the request to “app1” container •&#x9;Reload a few times to make this more obvious Go to http://localhost:8080/app2 and observe the command line link•&#x9;It will show you again that nginx-container web_1 container (reverse_proxy) was requested •&#x9;And now forwards to “app2” container •&#x9;Reload a few times to make this more obvious </description>
    </item>
    <item>
      <title>Docker Wordpress Example</title>
      <link>//localhost:1313/docs/docker/docker-wordpress-example/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/docker/docker-wordpress-example/</guid>
      <description>create wordpress docker compose link wordpress: image: wordpress links: - mariadb:mysql environment: - WORDPRESS_DB_PASSWORD=password - WORDPRESS_DB_USER=root ports: - &amp;#34;public_ip:80:80&amp;#34; volumes: - ./html:/var/www/html mariadb: image: mariadb environment: - MYSQL_ROOT_PASSWORD=password - MYSQL_DATABASE=wordpress volumes: - ./database:/var/lib/mysql run docker compose link docker compose up </description>
    </item>
    <item>
      <title>Multi-Arch Container</title>
      <link>//localhost:1313/docs/docker/multi-arch-container/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/docker/multi-arch-container/</guid>
      <description>build multi arch container images using buildx link</description>
    </item>
    <item>
      <title>Compose Watch Command</title>
      <link>//localhost:1313/docs/docker/compose-watch-command/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/docker/compose-watch-command/</guid>
      <description>Docker Composer sync build watch link</description>
    </item>
    <item>
      <title>Okteto Develop your applications directly in your Kubernetes Cluster</title>
      <link>//localhost:1313/blog/okteto/</link>
      <pubDate>Sat, 18 Feb 2023 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/blog/okteto/</guid>
      <description>Getting started with Oketo CLI Macos/Linux ➜ curl https://get.okteto.com -sSfL | sh &amp;gt; Using Release Channel: stable &amp;gt; Using Version: 2.14.0 &amp;gt; Downloading https://downloads.okteto.com/cli/stable/2.14.0/okteto-Darwin-arm64 % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 74.8M 100 74.8M 0 0 20.0M 0 0:00:03 0:00:03 --:--:-- 20.0M Login into Okteto Cloud via Github Account Configuring Okteto CLI with Okteto Cloud ➜ okteto context A context defines the default cluster/namespace for any Okteto CLI command.</description>
    </item>
    <item>
      <title>Porter - Create an installer bundling your application, client tools, configuration, and deployment logic for easy distribution and execution with a single command</title>
      <link>//localhost:1313/blog/porter/readme/</link>
      <pubDate>Sat, 18 Feb 2023 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/blog/porter/readme/</guid>
      <description>Porter - Create an installer bundling your application, client tools, configuration, and deployment logic for easy distribution and execution with a single command Porter is a CNCF project implementing the CNAB specification. It provides a CLI and Kubernetes Operator to create, publish, install, and maintain CNABs. Porter provides a consistent, platform-agnostic way to deploy and manage cloud native applications, making it easier to automate and manage the lifecycle of your applications</description>
    </item>
    <item>
      <title>Overview</title>
      <link>//localhost:1313/docs/overview/</link>
      <pubDate>Fri, 30 Sep 2022 05:33:22 +0100</pubDate>
      <guid>//localhost:1313/docs/overview/</guid>
      <description></description>
    </item>
    <item>
      <title>Quickstart</title>
      <link>//localhost:1313/docs/quickstart/</link>
      <pubDate>Fri, 30 Sep 2022 05:34:22 +0100</pubDate>
      <guid>//localhost:1313/docs/quickstart/</guid>
      <description></description>
    </item>
    <item>
      <title>Ingress Controller</title>
      <link>//localhost:1313/docs/kubernetes/ingress-controller/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/kubernetes/ingress-controller/</guid>
      <description>enable ingress addon link k8s101 git:(main) ✗ minikube addons enable ingress 💡 ingress is an addon maintained by Kubernetes. For any concerns contact minikube on GitHub. You can view the list of minikube maintainers at: https://github.com/kubernetes/minikube/blob/master/OWNERS 💡 After the addon is enabled, please run &amp;#34;minikube tunnel&amp;#34; and your ingress resources would be available at &amp;#34;127.0.0.1&amp;#34; ▪ Using image k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1 ▪ Using image k8s.gcr.io/ingress-nginx/controller:v1.2.1 ▪ Using image k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1 🔎 Verifying ingress addon.</description>
    </item>
    <item>
      <title>Pre-requisit for this lab</title>
      <link>//localhost:1313/docs/kubernetes/pre-requisit-for-this-lab/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/kubernetes/pre-requisit-for-this-lab/</guid>
      <description>Install Minikube link https://minikube.sigs.k8s.io/docs/start/ // i&amp;#39;m using mac so my installation step will be diffeent from you folks curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-darwin-amd64 sudo install minikube-darwin-amd64 /usr/local/bin/minikube ceate cluster using minikube link ➜ k8sworkshop git:(main) ✗ minikube start 😄 minikube v1.28.0 on Darwin 13.2.1 (arm64) ✨ Using the docker driver based on existing profile 👍 Starting control plane node minikube in cluster minikube 🚜 Pulling base image ... 🔄 Restarting existing docker container for &amp;#34;minikube&amp;#34; .</description>
    </item>
  </channel>
</rss>
